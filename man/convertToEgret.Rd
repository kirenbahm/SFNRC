% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convertToEgret.R
\name{convertToEgret}
\alias{convertToEgret}
\title{Convert DataForEver output to EGRET-compatible input}
\usage{
convertToEgret(stn, target_analyte, wq_data = NULL, flow_data = NULL,
  interact = FALSE, paStart = 10, paLong = 12, watershedKm = 1,
  removeNegativeFlow = TRUE, ...)
}
\arguments{
\item{stn}{target station. Not case-sensitive.}

\item{target_analyte}{Water quality parameter of interest. Internally converted to R-friendly form (no commas, hyphens, spaces).}

\item{wq_data}{water quality dataframe. Product of \code{\link{getWQ}}}

\item{flow_data}{flow dataframe. Product of \code{\link{getHydro}}. If set to NA, a dataframe of flow = 1.1 m3/s is created and used for analysis. This workaround is designed to allow WRTDS on stations without discharge data (e.g., open-water stations) but may not be mathematically sound.}

\item{interact}{logical Option for interactive mode. If true, there is user interaction for error handling and data checks. FALSE by default}

\item{paStart}{Starting month of period of analysis. Defaults to 10. Used in most EGRET functions}

\item{paLong}{Length in number of months of period of analysis. Defaults to 12. Used in most EGRET functions}

\item{watershedKm}{Watershed area in km2, used to calculate runoff. Defaults to 1}

\item{removeNegativeFlow}{logical, defaults to TRUE. Indicates whether negative flow data should be removed during pre-processing. EGRET tools do not accommodate negative flows.}

\item{...}{additional arguments sent to EGRET::mergeReport}
}
\value{
a list as created by \code{\link[EGRET]{mergeReport}}
}
\description{
Convert DataForEver output to EGRET-compatible input
}
\examples{
targStn <- "S333"
targAnalyte <- "PHOSPHATE, TOTAL AS P"

### subsetting occurs inside the function, so this prep is not necessary
# wq_dat <- wqDat[(wqDat$stn \%in\% targStn) & (wqDat$param \%in\% targAnalyte), ]
# flow_dat <- hydDat[hydDat$stn \%in\% targStn, ]
\dontrun{ # 20190404: this example causes Appveyor to fail
eList <- convertToEgret(stn = targStn, target_analyte = targAnalyte, 
     wq_data = wqDat, flow_data = hydDat)
     
eList_NA <- convertToEgret(stn = targStn, target_analyte = targAnalyte, 
     wq_data = wqDat, flow_data = NA)

est        <- modelEstimation(eList)
est_woFlow <- modelEstimation(eList_NA)

### not quite the same
plotConcPred(est)
plotConcPred(est_woFlow)
     
     }
}
